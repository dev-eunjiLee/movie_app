{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","to","pathname","state","className","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","About","props","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oSAoDeA,MA7Cf,YAA2D,IAA3CC,EAA0C,EAA1CA,GAAIC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACI,cAAC,IAAD,CAAMC,GAAM,CACRC,SAAS,UAAD,OAAYP,GACpBQ,MAAO,CAEHP,OACAC,QACAC,UACAC,SACAC,WARR,SAWA,sBAAKI,UAAU,QAAf,UACI,qBAAKC,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,sBAAKO,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BP,IAC9B,oBAAIO,UAAU,cAAd,SAA6BR,IAC7B,oBAAIQ,UAAU,gBAAd,SACCJ,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAQb,oBAAGL,UAAU,iBAAb,UAA+BN,EAAQY,MAAM,EAAE,KAA/C,kBCoCDC,G,kNAhEbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAMAC,IAAMC,IAAI,4DANV,gBAICJ,EAJD,EAGRK,KACEA,KAAOL,OAGXM,QAAQC,IAAIP,GAEZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IATzB,2C,uDAYb,WAYGU,KAAKR,c,oBAIP,WAAQ,MAGsBQ,KAAKnB,MAA1BS,EAHD,EAGCA,UAAWC,EAHZ,EAGYA,OAElB,OACE,yBAAST,UAAU,YAAnB,SACGQ,EACG,qBAAKR,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACGS,EAAON,KAAI,SAAAgB,GAAK,OACf,cAAC,EAAD,CAEE5B,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAAQuB,EAAMvB,QANTuB,EAAM5B,e,GAlDV8B,IAAMC,YCEVC,MALf,SAAeC,GAEX,OADAT,QAAQC,IAAIQ,GACL,uFCyBIC,E,uKAzBX,WAEIV,QAAQC,IAAIE,KAAKM,OAFF,MAIeN,KAAKM,MAA3BE,EAJO,EAIPA,SAAUC,EAJH,EAIGA,aAGIC,IAAnBF,EAAS3B,OACR4B,EAAQE,KAAK,O,oBAIrB,WAAS,IAEGH,EAAaR,KAAKM,MAAlBE,SAER,OAAGA,EAAS3B,MACD,+BAAO2B,EAAS3B,MAAMN,QAEtB,S,GArBE4B,IAAMC,WCeZQ,MATf,WACI,OAAO,gCAGH,cAAC,IAAD,CAAMjC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uBCgCOkC,MAjCf,WACE,OAOA,cALE,CAKD,IAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW3B,IACxC,cAAC,IAAD,CAAOyB,KAAK,SAASE,UAAWX,IAChC,cAAC,IAAD,CAAOS,KAAK,aAAaE,UAAWT,QCpBxCU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a47b9076.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n\r\n// state가 필요없는 경우 function component로 생성\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (\r\n        <Link to = {{\r\n            pathname: `/movie/${id}`,\r\n            state: {\r\n                // 프로퍼티 이름이 key 이름과 같을경우, 축약기법을 활용할 수 있습니다.\r\n                year,\r\n                title,\r\n                summary,\r\n                poster,\r\n                genres\r\n            }\r\n        }}>\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title}/>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key={index} className=\"genres__genre\">{genre}</li>\r\n                ))}\r\n                {/* {genres.map(genre => {return <li>{genre}</li>})} */}\r\n                {/* {genres.map(genre => <li>{genre}</li>)} */}\r\n                {/* {genres.map(function(genre){\r\n                    return <li>genre</li>\r\n                })} */}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0,140)}...</p>\r\n            </div>\r\n        </div>\r\n        </Link>\r\n    );\r\n}\r\n\r\n// 맞는 prop이 들어왔는지 확인\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import axios from \"axios\";\r\nimport React from \"react\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\"\r\n\r\nclass Home extends React.Component{\r\n\r\n  state = {\r\n    isLoading: true,\r\n    movies: []\r\n  }\r\n\r\n  getMovies = async () => {\r\n    // 구조 분해 할당\r\n    const {\r\n      data: {\r\n        data: {movies}\r\n      }\r\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\r\n    console.log(movies);\r\n    //this.setState({movies:movies}); -> 아래와 일치. key, property 변수명이 같을 경우 축약해서 사용 가능\r\n    this.setState({ movies, isLoading: false });\r\n  }\r\n  \r\n componentDidMount(){\r\n    /**\r\n     * axios -> role)fetch\r\n     * axios.get(string: url) -> 속도가 느리기 때문에 componentDidMount한테 시간이 좀 걸릴 수 있다. 기다려야 한다라고 전해야 한다.\r\n     *  방법\r\n     *    1. async를 componentDidMount 앞에 붙여서 비동기화로 처리하게 만든다.\r\n     *    2. 외부에서 함수를 만들어 호출\r\n     *        async: 기다려야해?\r\n     *        await: 이 뒤에걸 기다려야해!\r\n     *        --> 즉, axious가 끝날 때 까지 기다린다!\r\n     */ \r\n    \r\n    this.getMovies();\r\n    \r\n  }\r\n\r\n  render(){\r\n\r\n    //const isLoading = this.state.isLoading;\r\n    const {isLoading, movies} = this.state; // 구조 분해 할당\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        {isLoading \r\n          ? <div className=\"loader\">\r\n              <span className=\"loader__text\">Loading...</span>\r\n            </div> \r\n          : (\r\n            <div className=\"movies\">\r\n              {movies.map(movie => (\r\n                <Movie\r\n                  key={movie.id}\r\n                  id={movie.id}\r\n                  year={movie.year}\r\n                  title={movie.title}\r\n                  summary={movie.summary}\r\n                  poster={movie.medium_cover_image}\r\n                  genres={movie.genres}\r\n                />            \r\n              ))}\r\n            </div>\r\n          )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nfunction About(props){\r\n    console.log(props);\r\n    return <span>About this page: I build it becatuse I love movies</span>\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\nclass Detail extends React.Component{\r\n\r\n    componentDidMount(){\r\n\r\n        console.log(this.props);\r\n\r\n        const { location, history } = this.props;\r\n        \r\n        // 영화 선택없이 URL로 바로 들어온 경우 홈으로 리다이렉트\r\n        if(location.state === undefined){\r\n            history.push(\"/\"); // 홈으로 돌려보내기\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        const { location } = this.props;\r\n\r\n        if(location.state){\r\n            return <span>{location.state.title}</span>\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default Detail;","/**\r\n * 이 Navigation.js는 react-router-dom의 Link를 사용해 구현되었기 때문에\r\n * App.js에서 HashRouters 밖에서 사용 불가\r\n */\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navigation(){\r\n    return <div>\r\n        {/* <a href=\"/\">Home</a>\r\n        <a href=\"/about\">About</a> */}\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link> \r\n    </div>\r\n}\r\n\r\nexport default Navigation;","/////////////////////////////////////////////////////////////////////////////\n/** \n *  #6 0 Getting Ready for the Router ~ \n */\n/////////////////////////////////////////////////////////////////////////////\nimport React from \"react\";\nimport { BrowserRouter, HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App(){\n  return(\n\n    /**\n     * 이 Navigation.js는 react-router-dom의 Link를 사용해 구현되었기 때문에\n     * App.js에서 HashRouters 밖에서 사용 불가\n     */\n\n  <HashRouter>\n    <Navigation />\n    <Route path=\"/\" exact={true} component={Home}/>\n    <Route path=\"/about\" component={About}/>\n    <Route path=\"/movie/:id\" component={Detail}/>\n  </HashRouter>);\n\n  /*\n    다중 컴포넌트 랜더링 예시\n\n    <HashRouter>\n      <Route path=\"/home\">\n        <h1>home</h1>\n      </Route>\n      <Route path=\"/home/introduction\">\n        <h1>home with Introduction</h1>\n      </Route>\n      <Route path=\"/about\">\n        <h1>About</h1>\n      </Route>\n    </HashRouter>\n  */\n  \n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/** \n *  #4 0 Fetching Movies from API ~ #5 0 Deploying to Github Pages\n * 다음 수업을 위해 아래 내용 주석 처리\n */\n/////////////////////////////////////////////////////////////////////////////\n/*\nimport axios from \"axios\";\nimport React from \"react\";\nimport Movie from \"./components/Movie\";\nimport \"./App.css\"\n\nclass App extends React.Component{\n\n  state = {\n    isLoading: true,\n    movies: []\n  }\n\n  getMovies = async () => {\n    // 구조 분해 할당\n    const {\n      data: {\n        data: {movies}\n      }\n    } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\n    console.log(movies);\n    //this.setState({movies:movies}); -> 아래와 일치. key, property 변수명이 같을 경우 축약해서 사용 가능\n    this.setState({ movies, isLoading: false });\n  }\n  \n componentDidMount(){\n    /**\n     * axios -> role)fetch\n     * axios.get(string: url) -> 속도가 느리기 때문에 componentDidMount한테 시간이 좀 걸릴 수 있다. 기다려야 한다라고 전해야 한다.\n     *  방법\n     *    1. async를 componentDidMount 앞에 붙여서 비동기화로 처리하게 만든다.\n     *    2. 외부에서 함수를 만들어 호출\n     *        async: 기다려야해?\n     *        await: 이 뒤에걸 기다려야해!\n     *        --> 즉, axious가 끝날 때 까지 기다린다!\n     */ \n  /*  \n    this.getMovies();\n    \n  }\n\n  render(){\n\n    //const isLoading = this.state.isLoading;\n    const {isLoading, movies} = this.state; // 구조 분해 할당\n\n    return (\n      <section className=\"container\">\n        {isLoading \n          ? <div className=\"loader\">\n              <span className=\"loader__text\">Loading...</span>\n            </div> \n          : (\n            <div className=\"movies\">\n              {movies.map(movie => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                  genres={movie.genres}\n                />            \n              ))}\n            </div>\n          )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/** \n *  #3 3 Planning the Movie Component ~ .\n * 다음 수업을 위해 주석 처리\n */\n/////////////////////////////////////////////////////////////////////////////\n/*\nimport React from \"react\";\n\nclass App extends React.Component{\n\n  state = {\n    isLoading: true,\n    movieState: []\n  }\n\n  // When component mounted\n  componentDidMount(){\n    //setTimeout(): delay function\n    //setTimeout(func, 시간): 시간이 지나면 func 수행\n    setTimeout(()=>{\n      this.setState({isLoading: false});\n    }, 6000);\n\n  }\n\n  render(){\n\n    //const isLoading = this.state.isLoading;\n    const {isLoading} = this.state; // 구조 분해 할당\n\n    return (\n      <div>{isLoading ? \"Loading\" : \"We are Rready\"}</div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/** \n * 다음 예제를 위해 아래 내용 전부 주석 처리\n *  #3 0 Class Components and State ~ #3 2 Component Life Cycle\n */\n/////////////////////////////////////////////////////////////////////////////\n/*\nimport React from \"react\";\n\nclass App extends React.Component{\n\n  constructor(){\n    super();\n    console.log(\"I am construcotr\");\n  }\n\n  state = {\n    count: 0\n  };\n\n  add = (x,y) => {\n    console.log(\"add\");\n    this.setState(current => ({count: current.count + 1}));\n    //this.setState({count: this.state.count + 1}); --> 위와 동일\n  };\n  minus = () => {    \n    console.log(\"minus\");\n    //this.state.count = -1;\n    this.setState({count: this.state.count -1});\n  };\n  \n  // mount\n  componentDidMount(){\n    console.log(\"I am componentDidMount --> component rendered\");\n  }\n\n  // update\n  componentDidUpdate(){\n    console.log(\"I am componentDidUpdate --> I just updated\");\n  }\n\n  // unmount\n  componentWillUnmount(){\n    alert(\"Good Bye\");\n  }\n\n\n  render(){\n    console.log(\"I am render\");\n    return (\n      <div>\n        <h1>The number is {this.state.count}</h1>\n        <button onClick={()=>this.add(5,7)} >Add</button>\n        <button onClick={this.minus}>Minus</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n/** \n * 다음 예제를 위해 아래 내용 전부 주석 처리\n *  0-0 ~ 2-4 (PropTypes)\n */\n/////////////////////////////////////////////////////////////////////////////\n\n/*\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n// import Potato from \"./Potato\";\n\n// 외부에서 가져온 데이터(객체가 들어있는 배열 타입)\nconst foodILike = [\n  {\n    id: 1,\n    name: 'Kimchi',\n    image: 'https://www.koreanbapsang.com/wp-content/uploads/2019/11/DSC_0831.jpg',\n    rating: 5\n  },\n  {\n    id: 2,\n    name: 'Samgyeopsal',\n    image: 'https://t1.daumcdn.net/cfile/tistory/9942B3395A3501C304',\n    rating: 4.3\n  },\n  {\n    id: 3,\n    name: 'Bibimbap',\n    image: 'https://mblogthumb-phinf.pstatic.net/MjAxNzA0MjRfMjky/MDAxNDkzMDIzMjY5MjY5.u5q3w1Cl1wjxJoRzSpczd_VT2rScn_zaDV5LfKVMa6Mg.Tz5B-6i_SYH4yydceeZT6bNwDs-P5srXOE2uCDQ_Disg.JPEG.estelle926/151435979-56a57a083df78cf772888a61.jpg?type=w800',\n    rating: 4.9\n  },\n  {\n    id: 4,\n    name: 'Doncasu',\n    image: 'https://lh3.googleusercontent.com/proxy/M0Rs6d2AQd1NHkEM_23IsSL1eohn2rmW-KWWyD3UQHGGH3yIi7MXnUE4TQOLb51qGFJf0sVlKwSqnDLoxQVRBVjEMjiJmDK14GDo1tCUMzfvEQ',\n    rating: 4.8\n  },\n  {\n    id: 5,\n    name: 'Kimbap',\n    image: 'https://recipe1.ezmember.co.kr/cache/recipe/2019/03/10/168d255254103ff54861098af10adfae1.jpg',\n    rating: 4.7\n  }\n];\n\n/*\nfunction Food(props){\n  return (\n    <h1>I like {props.fav}</h1>\n  )\n}\n  ---> 위와 같은 식에서 아래로 변경\n        :  property 객체 내부의 값을 바로 꺼내 사용도 가능\n           {fav} === props.fav\n}*/\n\n/*\nfunction Food({name, picture, rating}){\n  //console.log({fav});\n  return (\n    <div>\n      <h2>I like {name}</h2>\n      <h4>{rating}/5.0</h4>\n      <img src={picture} width='100px' alt={name}></img>\n    </div> \n  )\n}\n\n// 부모에서 넘어온 prop들 체크 --> 해당 데이터의 타입이 이래야 한다~ 라고 작성!\nFood.propTypes = {\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n  rating: PropTypes.number\n\n  /*\n    rating의 경우 부모에서 넘긴값은 숫자이기 때문에 propTypes에서 string으로 설정하면 아래와 같은 에러 발생\n      ... -> index.js:1 Warning: Failed prop type: Invalid prop `rating` of type `number` supplied to `Food`, expected `string`.\n    \n    만약 부모가 보내는 prop의 값이 propTypes에 명시된 이름과 다르면 에러 발생   \n    \n    isRequired가 없는 경우: 해당 타입이거나 undefined까지도 괜찮다.\n  */\n/*};\n\n/*\n  function renderFood(dish){\n    return <Food name={dish.name} picture={dish.image} />;\n    // map에서 이 함수를 호출하면 react.element 객체를 가지고있는 배열이 리턴되어 브라우저에 뿌려진다.\n    // 여기서는 Food Component\n  }\n*/\n/*\nfunction App() {\n  return (\n  <div>\n      {/* {console.log(foodILike.map(renderFood))} *//*}*/\n/*      {/* {foodILike.map(renderFood)} *//*}*/\n/*      {foodILike.map(\n        dish => (\n        <Food name={dish.name} picture={dish.image} key={dish.id} rating={dish.rating} />\n        ))}\n  </div>\n  );\n}\n\nexport default App;\n\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}